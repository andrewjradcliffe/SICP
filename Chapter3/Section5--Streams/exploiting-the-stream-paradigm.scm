;; 3.5.3 Exploiting the Stream Paradigm

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))



;; Ex. 3.70

(define (weighted-merge weight s1 s2)
  (let ((s1car (stream-car s1))
        (s2car (stream-car s2)))
    (let ((w1 (weight s1car))
          (w2 (weight s2car)))
      (cond ((< w1 w2)
             (cons-stream s1car
                          (weighted-merge weight
                                          (stream-cdr s1)
                                          s2)))
            ((> w1 w2)
             (cons-stream s2car
                          (weighted-merge weight
                                          s1
                                          (stream-cdr s2))))
            ((= w1 w2)
             (cons-stream s1car
                          (weighted-merge weight
                                          (stream-cdr s1)
                                          (stream-cdr s2))))))))

(define (weighted-pairs weight s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (weighted-merge weight
                   (stream-map (lambda (x) (list (stream-car s) x))
                               (stream-cdr t))
                   (weighted-pairs weight
                                   (stream-cdr s)
                                   (stream-cdr t))
                   ;; (weighted-pairs weight
                   ;;                 (stream-cdr s)
                   ;;                 t)
                   ;; (weighted-pairs weight
                   ;;                 s
                   ;;                 (stream-cdr t))
                   )))

;; a
(define (weight p) (+ (car p) (cadr p)))

(define result-a
  (weighted-pairs
   weight
   integers
   integers))

(stream-collect-n result-a 10)
