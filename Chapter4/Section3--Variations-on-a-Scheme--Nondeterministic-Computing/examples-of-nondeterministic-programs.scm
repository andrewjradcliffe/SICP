;; 4.3.2 Examples of Nondeterministic Programs

;; Ex. 4.38
#|
simply remove: (require (not (= (abs (- smith fletcher)) 1)))

i.e.
|#

(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))


#|
The modified puzzle admits 6 solutions:

Initial
_______
smith
cooper
baker
fletcher
miller

Feasible#1
__________
smith
fletcher
baker
cooper
miller

Feasible#2
__________
baker
fletcher
smith
cooper
miller

Feasible#3
__________
baker
cooper
smith
fletcher
miller

Feasible#4
__________
baker
fletcher
smith
cooper
miller

Feasible#5
__________
baker
cooper
miller
fletcher
smith

|#


;; Ex. 4.39

#|
If we consider the restrictions checked prior to rejection, then it does
seem that some orderings would be faster than others, as some requirements
are more easily satisfied than others. Namely, the requirements involving more than
1 entity are likely to have fewer feasible solutions due to simple permutation.
In essence, one can reject a proposed solution by examination of any given
constraint, but it is possible to satisfy certain constraints with greater ease.
To give an example, (> miller cooper) can be unsatisfied while the preceding 4
constraints are satisfied.

(require (> miller cooper))
(require (not (= (abs (- fletcher cooper)) 1)))
(require (not (= (abs (- smith fletcher)) 1)))
(require (not (= cooper 1)))
(require (not (= fletcher 1)))
(require (not (= fletcher 5)))
(require (not (= baker 5)))

However, the re-ordering above still permits proposals which will fail on
single variable requirements. Thus, it will not be faster unless we could proceed
from the partial solutions generated by the multiple versions.

|#


;; Ex. 4.40
#|

Before distinct: 5^5 possible assignments
After distinct:  5! possible assignments

There are several ways to improve. First, we consider the creation of only the permutations.
Then, we consider a second improvement which exploits the structure of the problem.
|#
(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5)))
    (let ((cooper (an-element-of (filter (lambda (x)
                                           (not (= baker x)))
                                         (list 1 2 3 4 5)))))
      (let ((fletcher (an-element-of (filter (lambda (x)
                                               (and (not (= baker x))
                                                    (not (= cooper x))))
                                             (list 1 2 3 4 5)))))
        (let ((miller (an-element-of (filter (lambda (x)
                                               (and (not (= baker x))
                                                    (not (= cooper x))
                                                    (not (= fletcher x))))
                                             (list 1 2 3 4 5)))))
          (let ((smith (an-element-of (filter (lambda (x)
                                                (and (not (= baker x))
                                                     (not (= cooper x))
                                                     (not (= fletcher x))
                                                     (not (= miller x))))
                                              (list 1 2 3 4 5)))))
            (require (not (= baker 5)))
            (require (not (= cooper 1)))
            (require (not (= fletcher 5)))
            (require (not (= fletcher 1)))
            (require (> miller cooper))
            (require (not (= (abs (- smith fletcher)) 1)))
            (require (not (= (abs (- fletcher cooper)) 1)))
            (list (list 'baker baker)
                  (list 'cooper cooper)
                  (list 'fletcher fletcher)
                  (list 'miller miller)
                  (list 'smith smith))))))))


(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4))) ;; do not even allow baker to be 5
    (let ((cooper (an-element-of (filter (lambda (x)
                                           (not (= baker x)))
                                         (list 2 3 4 5))))) ;; ensure distinct and eliminate cooper =1
      (let ((fletcher (an-element-of (filter (lambda (x)
                                               (and (not (= baker x))
                                                    (not (= cooper x))))
                                             (list 2 3 4))))) ;; ensure distinct and eliminate fletcher = 1 or 5
        (require (not (= (abs (- fletcher cooper)) 1))) ;; check before generating full list
        (let ((miller (an-element-of (filter (lambda (x)
                                               (and (not (= baker x))
                                                    (not (= cooper x))
                                                    (not (= fletcher x))))
                                             (list 1 2 3 4 5)))))
          (require (> miller cooper)) ;; check before generating full list
          (let ((smith (an-element-of (filter (lambda (x)
                                                (and (not (= baker x))
                                                     (not (= cooper x))
                                                     (not (= fletcher x))
                                                     (not (= miller x))))
                                              (list 1 2 3 4 5)))))
            (require (not (= (abs (- smith fletcher)) 1)))
            (list (list 'baker baker)
                  (list 'cooper cooper)
                  (list 'fletcher fletcher)
                  (list 'miller miller)
                  (list 'smith smith))))))))
